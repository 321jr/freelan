Description: correct a typo in the source
Author: tony mancill <tmancill@debian.org>
Forwarded: no

--- freelan-2.0.orig/apps/freelan/src/main.cpp
+++ freelan-2.0/apps/freelan/src/main.cpp
@@ -517,7 +517,7 @@ void run(fscp::logger& logger, const cli
 			}
 			catch (std::exception& ex)
 			{
-				logger(fscp::log_level::error) << "Fatal exception occured in thread #" << i << ": " << ex.what();
+				logger(fscp::log_level::error) << "Fatal exception occurred in thread #" << i << ": " << ex.what();
 
 				core.close();
 				signals.cancel();
--- freelan-2.0.orig/libs/cryptoplus/include/cryptoplus/error/error.hpp
+++ freelan-2.0/libs/cryptoplus/include/cryptoplus/error/error.hpp
@@ -107,46 +107,46 @@ namespace cryptoplus
 		};
 
 		/**
-		 * \brief Get the earliest crypto error that occured in this thread and removes it from the error queue.
+		 * \brief Get the earliest crypto error that occurred in this thread and removes it from the error queue.
 		 * \return The last error.
 		 */
 		error_type get_error();
 
 		/**
-		 * \brief Get the earliest crypto error that occured in this thread and leaves it in the error queue.
+		 * \brief Get the earliest crypto error that occurred in this thread and leaves it in the error queue.
 		 * \return The last error.
 		 */
 		error_type peek_error();
 
 		/**
-		 * \brief Get the last crypto error that occured in this thread and leaves it in the error queue.
+		 * \brief Get the last crypto error that occurred in this thread and leaves it in the error queue.
 		 * \return The last error.
 		 */
 		error_type peek_last_error();
 
 		/**
-		 * \brief Get the earliest crypto error that occured in this thread and removes it from the error queue.
+		 * \brief Get the earliest crypto error that occurred in this thread and removes it from the error queue.
 		 * \param info The error information.
 		 * \return The last error.
 		 */
 		error_type get_error_line(error_info& info);
 
 		/**
-		 * \brief Get the earliest crypto error that occured in this thread and leaves it in the error queue.
+		 * \brief Get the earliest crypto error that occurred in this thread and leaves it in the error queue.
 		 * \param info The error information.
 		 * \return The last error.
 		 */
 		error_type peek_error_line(error_info& info);
 
 		/**
-		 * \brief Get the last crypto error that occured in this thread and leaves it in the error queue.
+		 * \brief Get the last crypto error that occurred in this thread and leaves it in the error queue.
 		 * \param info The error information.
 		 * \return The last error.
 		 */
 		error_type peek_last_error_line(error_info& info);
 
 		/**
-		 * \brief Get the earliest crypto error that occured in this thread and removes it from the error queue.
+		 * \brief Get the earliest crypto error that occurred in this thread and removes it from the error queue.
 		 * \param info The error information.
 		 * \param data The error data.
 		 * \return The last error.
@@ -154,7 +154,7 @@ namespace cryptoplus
 		error_type get_error_line_data(error_info& info, error_data& data);
 
 		/**
-		 * \brief Get the earliest crypto error that occured in this thread and leaves it in the error queue.
+		 * \brief Get the earliest crypto error that occurred in this thread and leaves it in the error queue.
 		 * \param info The error information.
 		 * \param data The error data.
 		 * \return The last error.
@@ -162,7 +162,7 @@ namespace cryptoplus
 		error_type peek_error_line_data(error_info& info, error_data& data);
 
 		/**
-		 * \brief Get the last crypto error that occured in this thread and leaves it in the error queue.
+		 * \brief Get the last crypto error that occurred in this thread and leaves it in the error queue.
 		 * \param info The error information.
 		 * \param data The error data.
 		 * \return The last error.
--- freelan-2.0.orig/libs/cryptoplus/include/cryptoplus/x509/store_context.hpp
+++ freelan-2.0/libs/cryptoplus/include/cryptoplus/x509/store_context.hpp
@@ -229,8 +229,8 @@ namespace cryptoplus
 				int get_error_depth() const;
 
 				/**
-				 * \brief Get the certificate where the error occured.
-				 * \return The certificate where the error occured. May be null.
+				 * \brief Get the certificate where the error occurred.
+				 * \return The certificate where the error occurred. May be null.
 				 */
 				certificate get_current_certificate() const;
 
--- freelan-2.0.orig/libs/fscp/include/fscp/server.hpp
+++ freelan-2.0/libs/fscp/include/fscp/server.hpp
@@ -358,7 +358,7 @@ namespace fscp
 			/**
 			 * \brief Greet an host.
 			 * \param target The target to greet.
-			 * \param handler The handler to call when a reply was received, an error occured or the request timed out.
+			 * \param handler The handler to call when a reply was received, an error occurred or the request timed out.
 			 * \param timeout The maximum time to wait for a reply.
 			 */
 			void async_greet(const ep_type& target, duration_handler_type handler, const boost::posix_time::time_duration& timeout = boost::posix_time::seconds(3));
@@ -430,7 +430,7 @@ namespace fscp
 			/**
 			 * \brief Send a presentation message to the specified target.
 			 * \param target The target host.
-			 * \param handler The handler to call when the presentation message is sent or an error occured.
+			 * \param handler The handler to call when the presentation message is sent or an error occurred.
 			 */
 			void async_introduce_to(const ep_type& target, simple_handler_type handler);
 
@@ -445,7 +445,7 @@ namespace fscp
 
 			/**
 			 * \brief Resend a presentation message to all the known peers.
-			 * \param handler The handler to call when all the presentation messages were sent or an error occured.
+			 * \param handler The handler to call when all the presentation messages were sent or an error occurred.
 			 */
 			void async_reintroduce_to_all(multiple_endpoints_handler_type handler);
 
@@ -562,7 +562,7 @@ namespace fscp
 			/**
 			 * \brief Sends a session request to an host.
 			 * \param target The target to greet.
-			 * \param handler The handler to call when the request was sent or an error occured.
+			 * \param handler The handler to call when the request was sent or an error occurred.
 			 */
 			void async_request_session(const ep_type& target, simple_handler_type handler);
 
@@ -908,7 +908,7 @@ namespace fscp
 			 * \param target The target host.
 			 * \param channel_number The channel number.
 			 * \param data The data to send.
-			 * \param handler The handler to call when the data was sent or an error occured.
+			 * \param handler The handler to call when the data was sent or an error occurred.
 			 */
 			void async_send_data(const ep_type& target, channel_number_type channel_number, boost::asio::const_buffer data, simple_handler_type handler);
 
@@ -928,7 +928,7 @@ namespace fscp
 			 * \param targets The list of hosts.
 			 * \param channel_number The channel number.
 			 * \param data The data to send.
-			 * \param handler The handler to call when the data was sent to all hosts or an error occured.
+			 * \param handler The handler to call when the data was sent to all hosts or an error occurred.
 			 */
 			void async_send_data_to_list(const std::set<ep_type>& targets, channel_number_type channel_number, boost::asio::const_buffer data, multiple_endpoints_handler_type handler);
 
@@ -938,7 +938,7 @@ namespace fscp
 			 * \param end An iterator past the last endpoint of the list.
 			 * \param channel_number The channel number.
 			 * \param data The data to send.
-			 * \param handler The handler to call when the data was sent to all hosts or an error occured.
+			 * \param handler The handler to call when the data was sent to all hosts or an error occurred.
 			 */
 			template <typename EPIterator>
 			void async_send_data_to_list(EPIterator begin, EPIterator end, channel_number_type channel_number, boost::asio::const_buffer data, multiple_endpoints_handler_type handler)
@@ -977,7 +977,7 @@ namespace fscp
 			 * \brief Send data to all hosts.
 			 * \param channel_number The channel number.
 			 * \param data The data to send.
-			 * \param handler The handler to call when the data was sent to all hosts or an error occured.
+			 * \param handler The handler to call when the data was sent to all hosts or an error occurred.
 			 */
 			void async_send_data_to_all(channel_number_type channel_number, boost::asio::const_buffer data, multiple_endpoints_handler_type handler)
 			{
@@ -998,7 +998,7 @@ namespace fscp
 			 * \brief Send a contact request to an host.
 			 * \param target The target host.
 			 * \param hash_list The hashes to request.
-			 * \param handler The handler to call when the data was sent or an error occured.
+			 * \param handler The handler to call when the data was sent or an error occurred.
 			 */
 			void async_send_contact_request(const ep_type& target, const hash_list_type& hash_list, simple_handler_type handler);
 
@@ -1016,7 +1016,7 @@ namespace fscp
 			 * \brief Send a contact request to a list of hosts.
 			 * \param targets The list of hosts.
 			 * \param hash_list The hashes to request.
-			 * \param handler The handler to call when the data was sent to all hosts or an error occured.
+			 * \param handler The handler to call when the data was sent to all hosts or an error occurred.
 			 */
 			void async_send_contact_request_to_list(const std::set<ep_type>& targets, const hash_list_type& hash_list, multiple_endpoints_handler_type handler);
 
@@ -1025,7 +1025,7 @@ namespace fscp
 			 * \param begin An iterator to the first endpoint of the list.
 			 * \param end An iterator past the last endpoint of the list.
 			 * \param hash_list The hashes to request.
-			 * \param handler The handler to call when the data was sent to all hosts or an error occured.
+			 * \param handler The handler to call when the data was sent to all hosts or an error occurred.
 			 */
 			template <typename EPIterator>
 			void async_send_contact_request_to_list(EPIterator begin, EPIterator end, const hash_list_type& hash_list, multiple_endpoints_handler_type handler)
@@ -1061,7 +1061,7 @@ namespace fscp
 			/**
 			 * \brief Send a contact request to all hosts.
 			 * \param hash_list The hashes to request.
-			 * \param handler The handler to call when the data was sent to all hosts or an error occured.
+			 * \param handler The handler to call when the data was sent to all hosts or an error occurred.
 			 */
 			void async_send_contact_request_to_all(const hash_list_type& hash_list, multiple_endpoints_handler_type handler)
 			{
@@ -1081,7 +1081,7 @@ namespace fscp
 			 * \brief Send contact information to an host.
 			 * \param target The target host.
 			 * \param contact_map The contact information.
-			 * \param handler The handler to call when the data was sent or an error occured.
+			 * \param handler The handler to call when the data was sent or an error occurred.
 			 */
 			void async_send_contact(const ep_type& target, const contact_map_type& contact_map, simple_handler_type handler);
 
@@ -1099,7 +1099,7 @@ namespace fscp
 			 * \brief Send contact information to a list of hosts.
 			 * \param targets The list of hosts.
 			 * \param contact_map The contact information.
-			 * \param handler The handler to call when the data was sent to all hosts or an error occured.
+			 * \param handler The handler to call when the data was sent to all hosts or an error occurred.
 			 */
 			void async_send_contact_to_list(const std::set<ep_type>& targets, const contact_map_type& contact_map, multiple_endpoints_handler_type handler);
 
@@ -1108,7 +1108,7 @@ namespace fscp
 			 * \param begin An iterator to the first endpoint of the list.
 			 * \param end An iterator past the last endpoint of the list.
 			 * \param contact_map The contact information.
-			 * \param handler The handler to call when the data was sent to all hosts or an error occured.
+			 * \param handler The handler to call when the data was sent to all hosts or an error occurred.
 			 */
 			template <typename EPIterator>
 			void async_send_contact_to_list(EPIterator begin, EPIterator end, const contact_map_type& contact_map, multiple_endpoints_handler_type handler)
@@ -1144,7 +1144,7 @@ namespace fscp
 			/**
 			 * \brief Send contact information to all hosts.
 			 * \param contact_map The contact information.
-			 * \param handler The handler to call when the data was sent to all hosts or an error occured.
+			 * \param handler The handler to call when the data was sent to all hosts or an error occurred.
 			 */
 			void async_send_contact_to_all(const contact_map_type& contact_map, multiple_endpoints_handler_type handler)
 			{
--- freelan-2.0.orig/libs/kfather/include/kfather/parser.hpp
+++ freelan-2.0/libs/kfather/include/kfather/parser.hpp
@@ -123,7 +123,7 @@ namespace kfather
 			 * parsing fails, value is guaranteed not to be modified.
 			 * \param begin An iterator to the first character to parse.
 			 * \param end An iterator past the last character to parse.
-			 * \param error_pos A pointer to an iterator where the last parsing error occured.
+			 * \param error_pos A pointer to an iterator where the last parsing error occurred.
 			 * \return  true if the parsing succeeds, false otherwise.
 			 *
 			 * If the parsing fails, and error_pos is not null, *error_pos is set to
--- freelan-2.0.orig/samples/fscp/client/client.cpp
+++ freelan-2.0/samples/fscp/client/client.cpp
@@ -339,7 +339,7 @@ int main()
 				catch (std::exception& ex)
 				{
 					mutex::scoped_lock lock(output_mutex);
-					std::cout << "Fatal exception occured in thread #" << i << ": " << ex.what() << std::endl;
+					std::cout << "Fatal exception occurred in thread #" << i << ": " << ex.what() << std::endl;
 
 					stop_function();
 					signals.cancel();
--- freelan-2.0.orig/samples/fscp/schat/schat.cpp
+++ freelan-2.0/samples/fscp/schat/schat.cpp
@@ -320,7 +320,7 @@ int main(int argc, char** argv)
 				catch (std::exception& ex)
 				{
 					mutex::scoped_lock lock(output_mutex);
-					std::cout << "Fatal exception occured in thread #" << i << ": " << ex.what() << std::endl;
+					std::cout << "Fatal exception occurred in thread #" << i << ": " << ex.what() << std::endl;
 
 					stop_function();
 					signals.cancel();
